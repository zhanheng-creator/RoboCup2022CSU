plugins {
  id 'java'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
version = '1.3'

dependencies {
  runtimeOnly fileTree( dir: new File( rootDir, 'jars' ), include: '*.jar' )
  implementation fileTree( dir: new File( rootDir, 'lib' ), include: '*.jar' )
  compile group: 'org.json', name: 'json', version: '20200518'

  testImplementation 'junit:junit:4.12'
}

repositories {
  jcenter()
}

sourceSets {
  main {
    java {
      srcDirs = [ 'modules/kernel/src',
                  'modules/handy/src',
                  'modules/misc/src',
                  'modules/rescuecore2/src',
                  'modules/standard/src',
                  'modules/clear/src',
                  'modules/collapse/src',
                  'modules/gis2/src',
                  'modules/human/src',
                  'modules/ignition/src',
                  'modules/maps/src',
                  'modules/sample/src',
                  'modules/traffic3/src',
                  'oldsims',
                  'modules/resq-fire/src'
                ]
    }
  }
}

test {
  useJUnit()
}

jar {
  manifest {
    attributes( 'Implementation-Title': project.name,
                'Implementation-Version': project.version )
  }
}

clean.doFirst {
  delete file( new File( rootDir, 'bin' ) )
  delete file( new File( rootDir, 'jars' ) )
  delete file( new File( rootDir, 'test-results' ) )
}

/* Modules jar generation tasks */
task clearSourceJar (type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from(sourceSets.main.allSource) {
    include 'clear/**'
  }
  destinationDir file('jars/sources')
  archiveName 'clear-sources.jar'
}

task clearJar(type: Jar) {
  from(sourceSets.main.output) {
    include 'clear/**'
  }
  destinationDir file('jars')
  archiveName 'clear.jar'
}

task collapseSourceJar (type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from(sourceSets.main.allSource) {
    include 'collapse/**'
  }
  destinationDir file('jars/sources')
  archiveName 'collapse-sources.jar'
}

task collapseJar(type: Jar) {
  from(sourceSets.main.output) {
    include 'collapse/**'
  }
  destinationDir file('jars')
  archiveName 'collapse.jar'
}

task gis2SourceJar (type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from(sourceSets.main.allSource) {
    include 'gis2/**'
  }
  destinationDir file('jars/sources')
  archiveName 'gis2-sources.jar'
}

task gis2Jar(type: Jar) {
  from(sourceSets.main.output) {
    include 'gis2/**'
  }
  destinationDir file('jars')
  archiveName 'gis2.jar'
}

task handySourceJar (type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from(sourceSets.main.allSource) {
    include 'handy/**'
  }
  destinationDir file('jars/sources')
  archiveName 'handy-sources.jar'
}

task handyJar (type: Jar) {
  from(sourceSets.main.output) {
    include 'handy/**'
  }
  destinationDir file('jars')
  archiveName 'handy.jar'
}

task humanSourceJar (type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from(sourceSets.main.allSource) {
    include 'human/**'
  }
  destinationDir file('jars/sources')
  archiveName 'human-sources.jar'
}

task humanJar (type: Jar) {
  from(sourceSets.main.output) {
    include 'human/**'
  }
  destinationDir file('jars')
  archiveName 'human.jar'
}

task ignitionSourceJar (type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from(sourceSets.main.allSource) {
    include 'ignition/**'
  }
  destinationDir file('jars/sources')
  archiveName 'ignition-sources.jar'
}

task ignitionJar (type: Jar) {
  from(sourceSets.main.output) {
    include 'ignition/**'
  }
  destinationDir file('jars')
  archiveName 'ignition.jar'
}

task kernelSourceJar (type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from(sourceSets.main.allSource) {
    include 'kernel/**'
  }
  destinationDir file('jars/sources')
  archiveName 'kernel-sources.jar'
}

task kernelJar(type: Jar) {
  from(sourceSets.main.output) {
    include 'kernel/**'
  }
  destinationDir file('jars')
  archiveName 'kernel.jar'
}

task mapsSourceJar (type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from(sourceSets.main.allSource) {
    include 'maps/**'
  }
  destinationDir file('jars/sources')
  archiveName 'maps-sources.jar'
}

task mapsJar (type: Jar) {
  from(sourceSets.main.output) {
    include 'maps/**'
  }
  destinationDir file('jars')
  archiveName 'maps.jar'
}

task miscSourceJar (type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from(sourceSets.main.allSource) {
    include 'misc/**'
  }
  destinationDir file('jars/sources')
  archiveName 'misc-sources.jar'
}

task miscJar (type: Jar) {
  from(sourceSets.main.output) {
    include 'misc/**'
  }
  destinationDir file('jars')
  archiveName 'misc.jar'
}

task rescuecore2SourceJar (type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from(sourceSets.main.allSource) {
    include 'rescuecore2/**'
    exclude 'rescuecore2/standard/**'
  }
  into 'rescuecore2', {
    from 'modules/rescuecore2/resources/rescuecore2'
  }
  destinationDir file('jars/sources')
  archiveName 'rescuecore2-sources.jar'
}

task rescuecore2Jar (type: Jar) {
  from(sourceSets.main.output) {
    include 'rescuecore2/**'
    exclude 'rescuecore2/standard/**'
  }
  into 'rescuecore2', {
    from 'modules/rescuecore2/resources/rescuecore2'
  }
  destinationDir file('jars')
  archiveName 'rescuecore2.jar'
}

task resqFireSourceJar (type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from(sourceSets.main.allSource) {
    include 'rescuecore/**'
    include 'firesimulator/**'
  }
  destinationDir file('jars/sources')
  archiveName 'resq-fire-sources.jar'
}

task resqFireJar (type: Jar) {
  from(sourceSets.main.output) {
    include 'rescuecore/**'
    include 'firesimulator/**'
  }
  destinationDir file('jars')
  archiveName 'resq-fire.jar'
}

task sampleSourceJar (type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from(sourceSets.main.allSource) {
    include 'sample/**'
  }
  destinationDir file('jars/sources')
  archiveName 'sample-sources.jar'
}

task sampleJar (type: Jar) {
  from(sourceSets.main.output) {
    include 'sample/**'
  }
  destinationDir file('jars')
  archiveName 'sample.jar'
}

task standardSourceJar (type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from(sourceSets.main.allSource) {
    include 'rescuecore2/standard/**'
  }
  into 'rescuecore2/standard', {
    from 'modules/standard/resources/rescuecore2/standard'
  }
  destinationDir file('jars/sources')
  archiveName 'standard-sources.jar'
}

task standardJar (type: Jar) {
  from(sourceSets.main.output) {
    include 'rescuecore2/standard/**'
  }
  into 'rescuecore2/standard', {
    from 'modules/standard/resources/rescuecore2/standard'
  }
  destinationDir file('jars')
  archiveName 'standard.jar'
}

task traffic3SourceJar (type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from(sourceSets.main.allSource) {
    include 'traffic3/**'
  }
  from 'modules/traffic3/resources'
  destinationDir file('jars/sources')
  archiveName 'traffic3-sources.jar'
}

task traffic3Jar (type: Jar) {
  from(sourceSets.main.output) {
    include 'traffic3/**'
  }
  from 'modules/traffic3/resources'
  destinationDir file('jars')
  archiveName 'traffic3.jar'
}

/* Generate the compressed source in Jar files  */
task sourcesJar(type: GradleBuild) {
  tasks = [ 'clearSourceJar', 'collapseSourceJar', 'gis2SourceJar',
            'handySourceJar', 'humanSourceJar', 'ignitionSourceJar',
            'kernelSourceJar', 'mapsSourceJar', 'miscSourceJar',
            'rescuecore2SourceJar', 'resqFireSourceJar', 'sampleJar',
            'standardSourceJar', 'traffic3SourceJar'
          ]
}

/* Perform a complete build of the simulator */
task completeBuild(type: GradleBuild) {
  tasks = [ 'clean', 'build', 'clearJar', 'collapseJar', 'gis2Jar', 'handyJar',
            'humanJar', 'ignitionJar', 'kernelJar', 'mapsJar', 'miscJar',
            'rescuecore2Jar', 'resqFireJar', 'sampleJar', 'standardJar',
            'traffic3Jar', 'sourcesJar'
          ]
}

/* Generate a random scenario */
task randomScenario(type: JavaExec) {
  workingDir = 'boot'
  classpath = files('supplement')
  classpath += sourceSets.main.runtimeClasspath
  main = 'gis2.RandomScenarioGenerator'
  maxHeapSize = '2048m'
  args = [ '../maps/gml/test/map' ]
}

/* Open scenario editor */
task scenarioEditor(type: JavaExec) {
  workingDir = 'boot'
  classpath = files('supplement')
  classpath += sourceSets.main.runtimeClasspath
  main = 'gis2.scenario.ScenarioEditor'
  maxHeapSize = '2048m'
  args = [ '../maps/gml/test/map' ]
}

/* Open LogViewer */
task logViewer(type: JavaExec, dependsOn: classes) {
  workingDir = 'boot'
  classpath = files('supplement')
  classpath += sourceSets.main.runtimeClasspath
  main = 'sample.SampleLogViewer'
  maxHeapSize = '256m'
  args = [ '-c', 'config/logviewer.cfg', 'logs/rescue.log']
}

/* Open gml editor */
task gmlEditor(type: JavaExec) {
  workingDir = 'boot'
  classpath = files('supplement')
  classpath += sourceSets.main.runtimeClasspath
  main = 'maps.gml.editor.GMLEditor'
  maxHeapSize = '2048m'
  args = [ '../maps/gml/test/map/map.gml' ]
}
